
TRYSTAN KAES
ID 108652414 (kaest)

CSCI 2421-E01

Assignment

*********************************************
** TO COMPILE -- 'make all'	               **
** TO RUN ------ './BinaryTree'            ** ##this reads from default file text.txt
** TO RUN ------ './binaryTree [filename]' ** ##this reads from user-defined file.
*********************************************

DESCRIPTION:
Based on the BinaryNodeTree example in Chapter16

Implement a new function

replace (item: ItemType, replacementItem ItemType) : boolean

This function locates, if possible, the node in a binary tree that contains item
and replaces item with replacementItem. Add this operation replace to the current
implementation. The operation should replace an item without alerting the tree
structure.

You don't have to implement every missing function in BinaryNodeTree.h
(Listing 16-3.h) but you need to implement a few such as contains, findNode, etc.

Develop a main driver function that takes words from a text file and construct
a binary tree. Each word from a text file is stored as a string. Let's assume
there's no special character in the input text file, and there's no duplicate
words in the input text file.

After completing the replace function, run contains for previous item and
replace item to verify the operation.


Grading guideline

Correct and complete functionality of the two programs 70%
Reasonable fault tolerance, i.e. it should not crash often. 10%
Makefile and Readme 10%
Documentation and comments in the code 10%



************Structure***********

This program's logic is contained within BinaryNodeTree.*. BinaryNodeTree.hpp
holds all the the templated class. BinaryNode.h holds the nodes/data structure
to be used. Exception contains a simple info class. Housekeeping holds all
interface between external data and the program. This includes read in's and
input validation.

The user on running the program has a choice to read in a custom file or
the default file which is hard coded. If no filename is specified at call,
hardcoded file is used. All words in the file are read in and placed in a
tree. If all is well program continues. (else user is informed what went wrong)

The user is prompted to enter a search term.

Tree is checked to see if it contains the term. If it does not, program terminates.
If it does, program continues.

User is prompted to enter a word to replace the searched word with.

The replace is executed and the original word is searched for a second time.

If all went well, the word is not found.


Program terminates.



**************Status************

-> Tested on MacBook Pro running High Sierra OS(10.13.4); 3.1GHz Intel Core i7;
   16 GB 1867 MHz DDR3

	-using gcc/g++ 7.2.0 processor
	-Linted using both Clang and gcc 7.4.2

-> Tested on csegrid.ucdenver.pvt


**********************
** WORKS COMPLETELY **
**********************


XXX: Future implementations will... I am satisfied for now.




************Copyright***********


   Copyright {2018} {Trystan Kaes}

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
