
TRYSTAN KAES
ID 108652414 (kaest)

CSCI 2421-E01

Assignment 3

****************************************
** TO COMPILE ----- 'make all'	      **
** TO RUN --------- './reformat'      **
****************************************

DESCRIPTION:

Refer to the documenting and submitting homework from here. Here is the complete
 implementation of mystring.h and mystring.cpp. This is similar to STL string, b-
ut it does not include all features available from STL string. For the education-
al purpose, we focus on using our own implementation of various string data stru-
ctures and functions. Take a close look at each function, how dynamic arrays are
 handled, and how operator overloadings for various functions are Using the myst-
ring.h and mystring.cpp, (you're not supposed to use STL string for this homewor-
k) 1) implement a text file formatting program. It takes a text file data.txt as
 an input file. The file name can be hard-coded in your program or take a file n-
ame as a command line parameter. The file has a few lines of text but the length-
(column) of the line is arbitrary. One line could have anywhere between 1 to 200
 characters before a new line (carriage return). Your program should ask the num-
ber of column to the user and format the text file accordingly. For example, if
a user types 65, every line should be aligned 65 long. You may have to combine t-
wo lines to one to eliminate the white spaces and blank lines, or split one to t-
wo. 2) in cases you need to change line in the middle of a word, you need to use
 a hyphen (-) to connect a word between two lines. 3) There should be no more th-
an one white space between two words. Multiple spaces, newlines or tabs must be
replaced with a space. You can assume that a hyphen can be added after the maxim-
um column. So if you're formatting a text to 60 columns and a word is starting a-
t the 60th column, you can add hyphen at 61st. Only the hyphen can come at 61st.
 For the output, display the formatted text on screen and save it to data.out fi-
le.


************Structure***********

Program is contained within mystring.*, kaest_functions.*, and the main interface.

kaest_functions.* contain the read in, read out, and integer bound/validity
checking.

mystring.* contains the algorithmic logic behind splitting strings.
While best described in the comments in that function, a high level analysis is
this:
When a call to split is made with the column size, the split function
allocates a pointer that points to new strings. The amount of strings is
determined by dividing the amount of elements in the string by the amount of
column elements desired. If the result of the modulus is > than one, it is
assumed that there are a small amount of elements that are not enough to
constitute a full row but are enough to need their own. In such a case, 1 is
added to the result.
Characters = the column size are placed in a temporary string and then placed
into the current row that is being indexed in the pointer. A cursor keeps track
of current place in the original string and if the last character wasn't a space,
this character isn't a space, and the cursor isn't at the end, a hyphen is Added
(in the middle of a word.)
The completed split string pointer is returned into the initial call location
and the rest of the practical interface is handled.

Call to the start of the program will prompt the user whether to format a
provided file or the file that comes with the program. The user can enter the
custom file in as a string(required for std::ifstream).
If the read in fails, the user is returned back into the initial menu.
When the read succeeds the user is prompted to enter in the desired column size.
Split is run, the reformat is printed to the screen, and the end data is written
out into data.out.




**************Status************

-> Tested on MacBook Pro running High Sierra OS(10.13.1); 3.1GHz Intel Core i7;
   16 GB 1867 MHz DDR3

	-using gcc/g++ 7.2.0 processor
	-Linted using both Clang and gcc 7.4.2

-> Tested on csegrid.ucdenver.pvt


**********************
** WORKS COMPLETELY **
**********************


XXX: Future implementations will. . . I am actually satisfied with how this is
in it's current state.




************Copyright***********


   Copyright {2018} {Trystan Kaes}

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
