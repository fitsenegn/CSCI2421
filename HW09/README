
TRYSTAN KAES
ID 108652414 (kaest)

CSCI 2421-E01

Assignment 9

***************************************************
** TO COMPILE ----- 'make all'	                 **
** TO RUN --------- './spell_checker' [filename] **
***************************************************

DESCRIPTION:
SPELL CHECKER

This programming homework is to develop a simple spelling checker. The file
dict.txt contains 25,021 frequently used words, each on a separate line in
lowercase. Read the file, and insert the words into a hash table with 1373
buckets. Remember to move dict.txt to the csegrid. Then run the command dos2unix
dict.txt (to remove those pesky /r's created by Windows).


Prompt for the name of an input text file to check. This file will contain a
number of words. For this assignment a word is any sequence of one or more
characters separated by one or more Spaces or newlines. You could be reading
text from a book, so you have to delete starting and ending quotations, and
delete periods, question marks, exclamation marks and semi-colons from the
back of the string. Since there are some unknown characters in a book, you
should loop through the entire word and remove non-alpha characters.

Read the document, and separate it into a sequence of words converted to
lowercase, where a word is defined by the following function

Using a hash table/function, print out a list of words that appear to be
misspelled, then print out the # of Words in the Dictionary, # of Words in the
File, # of words not in the dictionary.

Here are two files to check against (you may be a few off depending on how you
coded):

check.txt

Preview the document 25021 dictionary words, 29 words in file, 4 misspelled

Potter.txt

Preview the document 25021 dictionary words, 78452 words in file, 16588 words
misspelled


************Structure***********
This program relies on the functionality that is held within the STL unordered_map.

Housekeeping.* does a good portion of the weighty work. It contains the read in.

As always, exception.* is used for error checking.

On program call the user can specify what file they would like to spell check
on the commandline. If no file is specified the included check.txt is used.

The driver file reads in all the words from dict.txt and hashes them.
Duplicates are now rehashed and thus there is only a single hash for each unique
word. It then reads in all the words in from the file to be checked and places
them in a seperate hashmap. The toCheck hashmap is them iterated through and
each word is tested to see if it exists in the dict.txt hashmap. If it does not,
it is assumed to be misspelled. The count of the misspelled words goes up and
the misspelled word is pushed back into a vector.

At the end of a program all required information is printed to the screen.




**************Status************

-> Tested on MacBook Pro running High Sierra OS(10.13.1); 3.1GHz Intel Core i7;
   16 GB 1867 MHz DDR3

	-using gcc/g++ 7.2.0 processor
	-Linted using both Clang and gcc 7.4.2

-> Tested on csegrid.ucdenver.pvt


**********************
** WORKS COMPLETELY **
**********************


XXX: Future implementations will account for duplicates in a way that doesn't 
overload the interface and look awful. Also, I am not positive but have an
incling that the punctuation isn't stripping completly and might be causing
 errors. Lastly, I want to step through and check each number to make sure
that all is going well. I don't have time during this finals week to 
count all the duplicates in the Potter.txt though. 




************Copyright***********


   Copyright {2018} {Trystan Kaes}

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
