
TRYSTAN KAES
ID 108652414 (kaest)

CSCI 2421-E01

Assignment

*****************************************
** TO COMPILE ----- 'make all'	       **
** TO RUN --------- './ACADEMY_AWARDS' **
*****************************************

DESCRIPTION:
Overview

For many movie lovers, actors and directors, the annual Academy Awards are the
highlight of the year. Everyone dresses up, they walk the red-carpet, listen to
long and boring speeches and generally pat themselves on the back…but have you
ever wondered which movies are the top movies, or who has received the most
awards. Well you could ask google, but we are going to do our own data analysis.

The purpose of this final project is to help you think about the design of a
somewhat complicated project, then implement and test your code. We want you to
start first with the design. Read these requirements and make a design document
(answering the questions provided). Create a design document complete with the
objects and flow of data, as well as a decision on the best data structures to
use for each component. Then you will be ready to implement the code and test.
Please don't leave things until the last two weeks. Get started now, and please
ask your instructor and TA for help BEFORE you get too lost. Get the big picture
done first. Worry about the structure and implementation of the major
functionality. Then if you have time, work on the little details, and minor error
checking.

So now onto the requirements. ….And the Oscar goes to….

For your Final Project you will develop a simple database system. The database
is to handle multiple records, each composed of several fields.? The database
will store its information to a file, addition and deletion of records, field
modifications, and it will allow users to sort records based on the selected
keys, and produce reports (output) according to predefined criteria.

Some definitions:

A database is a collection of information, or data, that you can organize,
update, sort, search through, and print as needed.  A database does not just
hold information; you use a database to organize and analyze information so that
you understand its significance.

A database file consists of one or more records.  Each record holds all the
information about one subject item.  In C++, the class data type provides an
efficient way to represent and manipulate records.

Each piece of information in a record is called a field.  Fields store the data
that has been entered or calculated.  In C++, fields are nothing more than the
member variables defined for a particular class.


Requirements

Given the requirements as a rough specification, you are to design the classes
and implement the database. So you can consider the requirements below as an
outcome from a meeting with a client. You are in full control of the choice of
data structures (except the main data structure of a Binary Search Tree, more
detail below), algorithms, internal file format, and detailed user interface
scheme.

Requirements are listed with R:
You are designing and implementing a database for the Academy Award winners.


R1/R2: You are to read in information from two files. --

R1: You will read in actor-actress.csv which is formatted as a csv file (Ask the
user for the file name). Then place the items in a Binary Search Tree, sorted by
name. --

This is a common format and is comma separated (instead of being on separate
lines).  So you will have comma's between the values.  Blank values will just
have a comma noting to go to the next field. (so you may have value,, indicating
a blank field.)  Each line ends in a newline, not a comma. If you want to view
the file, often this will be opened by a spreadsheet unless you specifically
open it with a text editor.  Do not open it with Microsoft Word, as this may
change the format. Consider using getline with three parameters, as an easy way
to read in files  The first line of a CSV file notes the data descriptions as
follows:

Year,Award,Winner,Name,Film

The Winner field has a one if they won and a zero if they did not win.



R2: Then you will read in information about the movies (called pictures by the
Academy of Motion Pictures) that have won best picture award.  Place these items
in a Binary Search Tree, sorted by name. This is also formatted as a .csv file --

The first line of pictures.csv contains the data fields including:
name,year,nominations,rating,duration,genre1,genre2,release,metacritic,synopsis--

R3/R4: Choose either the movie or actor database and add a record--

R5/R6: Choose either the movie or actor database, search for a record, and
  modify the fields.

R7/R8: Choose either the movie or actor database, search for a record and delete
  the fields.

R9/R10: Choose either the movie or actor database and sort by any single
  (sortable) field

R11/R12: Choose either the movie or the actor database and do a complete search
on any “complete” searchable field. It is unlikely that you would have an exact
match on an entire description, so that would not be listed to search.

R13/R14: Choose either the movie or the actor database and do a partial search
on any searchable field.  A partial search is any substring within a field.

R15/R16: Choose either the movie or actor database, ask for a file name, and
print out a .csv file of the latest database (after adds, deletes or modifies).
Remember that the first line of a .csv file lists the name of the fields
separated with commas, ending in a newline. Then the following lines are the
information from the fields separated with commas, ending in a newline.



Database overall management

Use a text based menu for users to choose available features.

Program should have a main menu at the beginning and sub menus depending on the
  task.

Each component of the overall program should be fairly modular.

Each menu item, for example, should be a separate function. The menu feature
  should be handled by a separate function and not by main( ).

Program should be fairly fault tolerant of user input (both when the user is
  entering data, and making menu choices).

Provide appropriate user prompts and on-screen directions

Split the program into multiple files based on the roughly categorized
  functionality.

Data Retrieval and Modification

Users should be able to search records based on the field information in two
modes: exact and contains. For example, search "Justin".  Then under the search
sub menu, users have to pick the search mode (exact or contains) and the field.
(Fields should be listed out in another menu, so the user doesn't need to
remember a specific field name. Quite often, searches may generate a relatively
big output. Users should be able to search again within the search result
(secondary search) or start all over again from scratch (new search). Since the
entire data is structured in a Binary Search Tree of names, any search (except
name of movie or actor) will have to traverse the entire tree and search through
the designated fields in every node of the tree. There should be no restriction
to the number of records in the database. So, in other words, you should not
consider a fixed array for the record data structure.



************Structure***********





**************Status************

-> Tested on MacBook Pro running High Sierra OS(10.13.1); 3.1GHz Intel Core i7;
   16 GB 1867 MHz DDR3

	-using gcc/g++ 7.2.0 processor
	-Linted using both Clang and gcc 7.4.2

-> Tested on csegrid.ucdenver.pvt


**********************
** WORKS COMPLETELY **
**********************


XXX: Future implementations will. . .




************Copyright***********


   Copyright [2018] [Trystan Kaes]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.




















   cin.clear();
   std::string searching;
   getSearchTerm(searching,"Please enter a name: ");
   Actor_Actress searchTerm;
   // std::cout << searching;
   // std::cout << searchTerm.print();
   searchTerm.setName(searching);

   if(People->findItem(searchTerm) != nullptr){
     std::vector<Actor_Actress> test;

     // while(People->findItem(searchTerm) != nullptr){
     //   Actor_Actress Person = People->findItem(searchTerm)->getItem();
     //   test.push_back(Person);
     //   if(Person != nullptr){
     //     People->deleteBinaryNode(Person);
     //   }

     // }

     // for(int i = 0; i < test.size(); i++){
     //   People->addBinaryNode(test[i]);
     // }

     for(int i = 0; i < test.size(); i++){
       std::cout << "------> "<< i << endl;
       std::cout << test[i].print() << endl;
     }
     int check;
     std::cout << "\nWhich of these is the correct reference?\n";
     std::cin >> check;
     Actor_Actress Person = test[check];
     std::cout << Person.print();
     std::cout << "\nEntry found. What would you like to do?"
               << "\n1) Modify"
               << "\n2) Delete"
               << "\n3) Back"
               << "\n> ";
     int c;
     std::cin >> c;
     switch(c){
       case 1:{
           // People->deleteBinaryNode(Person);
           Actor_Actress temp = Person;
           Person.modifyField();
           People->replace(temp, Person);
         }break;
       case 2:
           People->deleteBinaryNode(Person);
           std::cout << "\n***Deleted***\n.";
         break;
       case 3:
         break;
       default: std::cout << "\n***invalid***\n";
     }
     std::cin.ignore();
   }else{
     std::cout << "Not Found";
   }
